{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\n/*eslint-disable */\nimport { auth, signInWithEmailAndPassword } from \"@/firebaseConfig/firebaseConfig.js\";\nimport { API_URL } from \"@/helpers/basicFunctions\";\nexport default {\n  name: \"LoginCom\",\n  props: {\n    validacionMail: {\n      Function\n    },\n    validacionContraseña: {\n      Function\n    }\n  },\n  data: () => ({\n    valid: true,\n    emailLogIn: \"\",\n    pwdLogIn: \"\",\n    userNotFound: false,\n    passwordNotFound: false\n  }),\n  methods: {\n    logIn() {\n      this.$refs.form.validate();\n      this.logInFirebase();\n      //this.encontrarUsuario(this.emailLogIn, this.pwdLogIn);\n      //this.logInFirebase();\n    },\n\n    async logInFirebase() {\n      const logInData = {\n        mail: this.emailLogIn,\n        pwd: this.pwdLogIn\n      };\n      await signInWithEmailAndPassword(auth, logInData.mail, logInData.pwd).then(userCredential => {\n        this.userNotFound = false;\n        this.passwordNotFound = false;\n        const user = userCredential.user;\n        this.encontrarUsuario(user.email);\n        debugger;\n        localStorage.setItem(`carrito_${user.email}`, JSON.stringify({\n          userId: user.uid,\n          cesta: []\n        }));\n      }).catch(error => {\n        const errorCode = error.code;\n        if (errorCode === \"auth/user-not-found\") {\n          this.userNotFound = true;\n        }\n        if (errorCode === \"auth/wrong-password\") {\n          this.passwordNotFound = true;\n        }\n      });\n      console.log(this.userNotFound);\n    },\n    async encontrarUsuario(email) {\n      const mail = email;\n      const foundUser = await fetch(`${API_URL}users/login/${mail}`).then(res => res.json());\n      console.log(foundUser);\n      if (foundUser !== \"NOTFOUND\") {\n        this.$router.push(\"/\");\n      }\n    }\n  }\n};","map":{"version":3,"mappings":";AAuDA;AACA,SACEA,IAAI,EACJC,0BAA0B,QACrB,oCAAoC;AAC3C,SAASC,OAAM,QAAS,0BAA0B;AAElD,eAAe;EACbC,IAAI,EAAE,UAAU;EAChBC,KAAK,EAAE;IACLC,cAAc,EAAE;MAAEC;IAAS,CAAC;IAC5BC,oBAAoB,EAAE;MAAED;IAAS;EACnC,CAAC;EACDE,IAAI,EAAE,OAAO;IACXC,KAAK,EAAE,IAAI;IACXC,UAAU,EAAE,EAAE;IACdC,QAAQ,EAAE,EAAE;IACZC,YAAY,EAAE,KAAK;IACnBC,gBAAgB,EAAE;EACpB,CAAC,CAAC;EACFC,OAAO,EAAE;IACPC,KAAK,GAAG;MACN,IAAI,CAACC,KAAK,CAACC,IAAI,CAACC,QAAQ,EAAE;MAC1B,IAAI,CAACC,aAAa,EAAE;MACpB;MACA;IACF,CAAC;;IAED,MAAMA,aAAa,GAAG;MACpB,MAAMC,SAAQ,GAAI;QAChBC,IAAI,EAAE,IAAI,CAACX,UAAU;QACrBY,GAAG,EAAE,IAAI,CAACX;MACZ,CAAC;MACD,MAAMV,0BAA0B,CAACD,IAAI,EAAEoB,SAAS,CAACC,IAAI,EAAED,SAAS,CAACE,GAAG,EACjEC,IAAI,CAAEC,cAAc,IAAK;QACxB,IAAI,CAACZ,YAAW,GAAI,KAAK;QACzB,IAAI,CAACC,gBAAe,GAAI,KAAK;QAC7B,MAAMY,IAAG,GAAID,cAAc,CAACC,IAAI;QAChC,IAAI,CAACC,gBAAgB,CAACD,IAAI,CAACE,KAAK,CAAC;QACjC;QACAC,YAAY,CAACC,OAAO,CACjB,WAAUJ,IAAI,CAACE,KAAM,EAAC,EACvBG,IAAI,CAACC,SAAS,CAAC;UAAEC,MAAM,EAAEP,IAAI,CAACQ,GAAG;UAAEC,KAAK,EAAE;QAAG,CAAC,EAC/C;MACH,CAAC,EACAC,KAAK,CAAEC,KAAK,IAAK;QAChB,MAAMC,SAAQ,GAAID,KAAK,CAACE,IAAI;QAC5B,IAAID,SAAQ,KAAM,qBAAqB,EAAE;UACvC,IAAI,CAACzB,YAAW,GAAI,IAAI;QAC1B;QACA,IAAIyB,SAAQ,KAAM,qBAAqB,EAAE;UACvC,IAAI,CAACxB,gBAAe,GAAI,IAAI;QAC9B;MACF,CAAC,CAAC;MACJ0B,OAAO,CAACC,GAAG,CAAC,IAAI,CAAC5B,YAAY,CAAC;IAChC,CAAC;IACD,MAAMc,gBAAgB,CAACC,KAAK,EAAE;MAC5B,MAAMN,IAAG,GAAIM,KAAK;MAClB,MAAMc,SAAQ,GAAI,MAAMC,KAAK,CAAE,GAAExC,OAAQ,eAAcmB,IAAK,EAAC,CAAC,CAACE,IAAI,CAChEoB,GAAG,IAAKA,GAAG,CAACC,IAAI,EAAC,CACnB;MACDL,OAAO,CAACC,GAAG,CAACC,SAAS,CAAC;MAEtB,IAAIA,SAAQ,KAAM,UAAU,EAAE;QAC5B,IAAI,CAACI,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC;MACxB;IACF;EACF;AACF,CAAC","names":["auth","signInWithEmailAndPassword","API_URL","name","props","validacionMail","Function","validacionContraseña","data","valid","emailLogIn","pwdLogIn","userNotFound","passwordNotFound","methods","logIn","$refs","form","validate","logInFirebase","logInData","mail","pwd","then","userCredential","user","encontrarUsuario","email","localStorage","setItem","JSON","stringify","userId","uid","cesta","catch","error","errorCode","code","console","log","foundUser","fetch","res","json","$router","push"],"sourceRoot":"","sources":["/home/rafa/Vue/proyectovue/src/components/LoginCom.vue"],"sourcesContent":["<template>\n  <v-col cols=\"12\" md=\"6\">\n    <v-form ref=\"form\" v-model=\"this.valid\" miValidacion>\n      <v-card-text class=\"mt-12\">\n        <h4 class=\"text-center\">Inicia Sesión en tu cuenta</h4>\n        <v-row align=\"center\" justify=\"center\">\n          <v-col cols=\"12\" sm=\"8\">\n            <v-text-field\n              v-model=\"emailLogIn\"\n              label=\"Correo Electrónico\"\n              outlined\n              dense\n              color=\"blue\"\n              autocomplete=\"false\"\n              class=\"mt-16\"\n              :rules=\"validacionMail\"\n              required\n            />\n            <v-text-field\n              v-model=\"pwdLogIn\"\n              label=\"Contraseña\"\n              outlined\n              dense\n              :rules=\"validacionContraseña\"\n              color=\"blue\"\n              autocomplete=\"false\"\n              type=\"password\"\n              required\n            />\n            <v-row>\n              <v-col cols=\"12\" sm=\"7\">\n                <v-checkbox label=\"Recordar\" class=\"mt-n1\" color=\"blue\">\n                </v-checkbox>\n              </v-col>\n            </v-row>\n            <h3 style=\"color: red\" v-if=\"userNotFound || passwordNotFound\">\n              Usuario o Contraseña Incorrectas\n            </h3>\n            <v-btn\n              :disabled=\"!valid\"\n              color=\"success\"\n              dark\n              block\n              tile\n              @click=\"logIn()\"\n              >INICIAR SESIÓN</v-btn\n            >\n          </v-col>\n        </v-row>\n      </v-card-text>\n    </v-form>\n  </v-col>\n</template>\n\n<script>\n/*eslint-disable */\nimport {\n  auth,\n  signInWithEmailAndPassword,\n} from \"@/firebaseConfig/firebaseConfig.js\";\nimport { API_URL } from \"@/helpers/basicFunctions\";\n\nexport default {\n  name: \"LoginCom\",\n  props: {\n    validacionMail: { Function },\n    validacionContraseña: { Function },\n  },\n  data: () => ({\n    valid: true,\n    emailLogIn: \"\",\n    pwdLogIn: \"\",\n    userNotFound: false,\n    passwordNotFound: false,\n  }),\n  methods: {\n    logIn() {\n      this.$refs.form.validate();\n      this.logInFirebase();\n      //this.encontrarUsuario(this.emailLogIn, this.pwdLogIn);\n      //this.logInFirebase();\n    },\n\n    async logInFirebase() {\n      const logInData = {\n        mail: this.emailLogIn,\n        pwd: this.pwdLogIn,\n      };\n      await signInWithEmailAndPassword(auth, logInData.mail, logInData.pwd)\n        .then((userCredential) => {\n          this.userNotFound = false;\n          this.passwordNotFound = false;\n          const user = userCredential.user;\n          this.encontrarUsuario(user.email);\n          debugger;\n          localStorage.setItem(\n            `carrito_${user.email}`,\n            JSON.stringify({ userId: user.uid, cesta: [] })\n          );\n        })\n        .catch((error) => {\n          const errorCode = error.code;\n          if (errorCode === \"auth/user-not-found\") {\n            this.userNotFound = true;\n          }\n          if (errorCode === \"auth/wrong-password\") {\n            this.passwordNotFound = true;\n          }\n        });\n      console.log(this.userNotFound);\n    },\n    async encontrarUsuario(email) {\n      const mail = email;\n      const foundUser = await fetch(`${API_URL}users/login/${mail}`).then(\n        (res) => res.json()\n      );\n      console.log(foundUser);\n\n      if (foundUser !== \"NOTFOUND\") {\n        this.$router.push(\"/\");\n      }\n    },\n  },\n};\n</script>\n\n<style></style>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}